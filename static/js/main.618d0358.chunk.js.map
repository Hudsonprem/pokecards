{"version":3,"sources":["Components/Scroll.js","Components/Card.js","Components/CardList.js","Components/Search.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Scroll","props","style","overflow","border","height","children","Card","id","name","email","className","src","alt","toUpperCase","CardList","poke","map","user","i","newurl","url","slice","length","urlnum","startsWith","key","Search","type","placeholder","onChange","seacrhChange","App","array","a","fetch","json","list","results","setPokemon","useState","pokemon","seacrhfield","setseacrhfield","fetchmon","filterList","filter","robot","toLowerCase","includes","event","target","value","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oRAUeA,EARA,SAACC,GACZ,OACA,yBAAKC,MAAO,CAAEC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,UACpEJ,EAAMK,SADP,M,MCkBWC,MAnBf,YAAiC,IAAlBC,EAAiB,EAAjBA,GAAIC,EAAa,EAAbA,KAEf,OAF4B,EAAPC,MAGjB,yBAAKC,UAAU,oDACX,yBAAKA,UAAU,gBACf,yBAAKA,UAAU,YACf,yBAAMC,IAAG,mFAA+EJ,EAA/E,QAAyFK,IAAI,YAEjG,yBAAKF,UAAU,eAChB,4BAAKF,EAAKK,eACV,wCC+BDC,EAvCE,SAAC,GACjB,IADkBC,EACnB,EADmBA,KAEjB,OACM,6BACSA,EAAKC,KAAI,SAACC,EAAKC,GAEZ,IAAIC,EAASF,EAAKG,IAAIC,MAAMJ,EAAKG,IAAIE,OAAQ,EAAEL,EAAKG,IAAIE,OAAO,GAE/D,SAASC,EAAOH,GAEhB,OAAGA,EAAII,WAAW,KAEXJ,EAAIC,MAAM,GAETD,EAAII,WAAW,KAEhBJ,EAAIC,MAAM,GAGND,EAIX,OACK,kBAAC,EAAD,CACGK,IAAOP,EACPX,GAAKgB,EAAOJ,GACZX,KAAOS,EAAKT,KACZC,MAAQc,EAAOJ,UChB5BO,EAdA,SAAC1B,GAEZ,OACI,yBAAKU,UAAU,OACX,2BACAA,UAAU,uCACViB,KAAK,SACLC,YAAY,sBACZC,SAAY7B,EAAM8B,iB,MCsCfC,MA1Cf,WAEE,IAAIC,EAAQ,GADd,4CAEE,8BAAAC,EAAA,sEAEiBC,MAAM,+CAFvB,cAEInB,EAFJ,gBAGiBA,EAAKoB,OAHtB,cAGIC,EAHJ,gBAIcA,EAAKC,QAJnB,OAIAL,EAJA,OAKAM,EAAWN,GALX,6CAFF,4BAUgC,IAAIO,WAAS,IAV7C,mBAUSC,EAVT,KAUiBF,EAVjB,OAWwC,IAAIC,WAAS,IAXrD,mBAWSE,EAXT,KAWqBC,EAXrB,yCAYEC,GAOM,IAAMC,EAAaJ,EAAQK,QAAO,SAASC,GAC3C,OAAOA,EAAMtC,KAAKuC,cAAcC,SAASP,EAAYM,kBAGrD,OAAQP,EAAQlB,OACd,yBAAKZ,UAAW,MACd,wBAAIA,UAAU,aAAd,wBAIA,kBAAC,EAAD,CAAQoB,aAfb,SAAkBmB,GAEfP,EAAeO,EAAMC,OAAOC,UAc1B,6BAEA,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUpC,KAAS6B,MAVF,yCCnBbQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCVNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.618d0358.chunk.js","sourcesContent":["import React from 'react';\n\nconst Scroll = (props)=>{\n    return (\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\n    {props.children};\n    </div>\n    );\n};\n\nexport default Scroll;","import React from 'react';\nimport \"./card.css\";\n\nfunction Card({id, name, email}){\n\n    return(\n        <div className=\"dib br4 pa2 grow bw2 shadow-5 tc pokeCardOutline\">\n            <div className=\"br3 pokeCard\" >\n            <div className=\"pokeImg \">\n            <img  src= {`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${id}.png`} alt=\"robots\" />\n            </div>\n                 <div className=\"pokeDetails\">\n                <h1>{name.toUpperCase()}</h1>\n                <p>Hello</p>\n              </div>\n            </div>\n        </div>\n        \n    );\n}\n\n\nexport default Card;\n","import React ,{useState} from 'react';\nimport Card from \"./Card\";\n\n\n\nconst CardList = ({poke})=>\n{\n  return(\n        <div>\n                {poke.map((user,i) => {\n\n                    var newurl = user.url.slice(user.url.length -4,user.url.length-1);\n\n                    function urlnum(url)\n                    {\n                    if(url.startsWith(\"/\"))\n                    {\n                    return url.slice(1);\n                    }\n                    else if(url.startsWith(\"n\"))\n                    {\n                    return url.slice(2);\n                    }\n                    else{\n                        return url;\n                    }\n                    }\n                \n                    return(\n                         <Card\n                            key = {i}\n                            id= {urlnum(newurl)}\n                            name={ user.name }\n                            email= {urlnum(newurl)}\n                            />\n                            )\n                    }\n                )}\n        </div>\n    );\n\n}\n\n\nexport default CardList;\n","import React from \"react\";\n\n\nconst Search = (props)=>{\n\n    return(\n        <div className=\"pa2\">\n            <input \n            className=\"pa3 ba br3 b--green bg-lightest-blue\"\n            type=\"search\" \n            placeholder=\"Search your Pokemon\"\n            onChange = {props.seacrhChange} />\n        </div>\n    )\n\n}\n\nexport default Search;","import React, {useState} from 'react';\nimport Scroll from \"../Components/Scroll\";\nimport CardList from '../Components/CardList';\nimport Seacrh from \"../Components/Search\";\n// import robots from \"../Components/robots\";\nimport \"./App.css\";\n\nfunction App() \n{\n  var array = [];\n  async function fetchmon()\n  {\n  var poke = await fetch(\"https://pokeapi.co/api/v2/pokemon?limit=500\");\n  var list = await poke.json();\n  array = await list.results;\n  setPokemon(array);\n  }\n\n  const [pokemon,setPokemon ] = new useState([]);\n  const [seacrhfield,setseacrhfield ] = new useState(\"\");\n  fetchmon()\n  \n       function onSearch(event)\n        {\n          setseacrhfield(event.target.value);\n        } \n\n        const filterList = pokemon.filter(function(robot){\n        return robot.name.toLowerCase().includes(seacrhfield.toLowerCase())\n      }) \n  \n        return !pokemon.length ? <h1>Loading </h1> : (\n          <div className =\"tc\">\n            <h1 className=\"hudson f1\">\n              Welcome to PokeCards\n            </h1>\n        \n            <Seacrh seacrhChange =  { onSearch }/>\n            <hr/>\n\n            <Scroll>  \n                <CardList poke = { filterList }/>\n            </Scroll>\n          </div>\n        );\n  \n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from \"./Containers/App\";\nimport * as serviceWorker from './serviceWorker';\nimport \"tachyons\";\nimport \"./index.css\";\n\n\nReactDOM.render(\n    <App/>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}